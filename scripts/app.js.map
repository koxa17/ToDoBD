{"version":3,"sources":["app.js"],"names":["form","document","getElementById","list","querySelector","clearBtn","input","Task","[object Object]","url","method","id","body","fetch","JSON","stringify","headers","Content-Type","then","response","ok","json","err","e","Error","status","data","task","sendRequest","name","setToLocalStorage","renderList","catch","console","log","finally","loadingAnimate","tasks","getFromLocalStorage","liItem","length","map","toList","join","disabled","removeEventListener","animateEmptyList","addEventListener","allClear","once","innerHTML","deleteTask","localStorage","removeItem","done","doneTask","addTask","preventDefault","createTask","text","value","trim","date","Date","focus","reset","toLocaleDateString","toLocaleTimeString","action","event","target","dataset","parentElement","delete","all","splice","findIndex","setItem","item","loading","children","textContent","style","display","insertAdjacentHTML","push","parse","getItem","emoji","getElementsByClassName","emptyTitle","key","src","setTimeout","window","bind","this"],"mappings":"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","file":"app.js","sourcesContent":["// Форма\r\nconst form = document.getElementById('form');\r\n// список ul\r\nconst list = document.querySelector('.list-group');\r\n// кнопка очистки списка\r\nconst clearBtn = document.getElementById('btn-clear');\r\n// инпут для задач\r\nconst input = document.getElementById('addNewTask');\r\n\r\n// класс для управления тасками\r\nclass Task {\r\n    // метод для отправки запросов на сервер - передаем в него обьект настроек\r\n    static sendRequest({ url, method, id = '', body = null }) {\r\n        // отправляем данные через фетч\r\n        return fetch(`${url}/${id}.json`, {\r\n                method: method,\r\n                body: JSON.stringify(body),\r\n                headers: {\r\n                    'Content-Type': 'application/json;'\r\n                }\r\n            }) // получаем ответ и парсим\r\n            .then(response => {\r\n                if (response.ok) {\r\n                    return response.json()\r\n                } // если response не ок выводим ошибку\r\n                return response.json().then(err => {\r\n                    const e = new Error(`Ошибка: ${response.status}!`);\r\n                    e.data = err;\r\n                    throw e;\r\n                })\r\n            })\r\n    }\r\n\r\n    // метод создания тасков\r\n    static createTask(task) {\r\n        // создаем таск в БД\r\n        Task.sendRequest({\r\n                url: 'https://ratatype-c2d32.firebaseio.com/tasks',\r\n                method: 'POST',\r\n                body: task\r\n            })\r\n            .then(data => {\r\n                // добавляем таску id, записываем в него ключ с бд\r\n                task.id = data.name;\r\n                return task;\r\n            }) // сохраняем задачу в LocalStorage\r\n            .then(setToLocalStorage)\r\n            // рендерим все это на сайте\r\n            .then(Task.renderList)\r\n            .catch(err => {\r\n                console.log(err);\r\n            }) // отключаем анимацию loading\r\n            .finally(loadingAnimate);\r\n    }\r\n\r\n    // метод отрисовки задач\r\n    static renderList() {\r\n        // получаем все задачи из LocalStorage\r\n        const tasks = getFromLocalStorage();\r\n\r\n        // тут будет лежать созданая <li> в зависимости от таском, есть они или там пусто\r\n        let liItem = null;\r\n\r\n        // проверяем что есть задачи\r\n        if (tasks.length) {\r\n            // полученый массив изменяем, прогоняя через функцию toList, которая вернет шаблон li для каждого таска\r\n            // полученый массив джоиним в строку\r\n            liItem = tasks.map(toList).join('');\r\n\r\n            // включаем кнопку очистки списка тасков\r\n            clearBtn.disabled = ''\r\n\r\n            // TODO: удаляем слушателя с пустого списка - можно удалить\r\n            input.removeEventListener('keydown', animateEmptyList);\r\n\r\n            // слушаем кнопку очистки {once: true} добавлен чисто для теста, тут он не нужен\r\n            clearBtn.addEventListener('click', Task.allClear, { once: true });\r\n        } else {\r\n            // если тасков нет, шаблон li что список пуст \r\n            liItem = `<li class=\"list-group-item justify-content-center align-items-center listEmpty\">\r\n            <img src=\"img/norm.svg\" alt=\"Смайлик\" class=\"emoji\">\r\n            <span class=\"task-title\">Этот список пуст, как и твоя душа!</span>\r\n            </li>`;\r\n\r\n            // удаляем слушателя, так как нам удалять нечего\r\n            clearBtn.removeEventListener('click', Task.allClear);\r\n            // отклюдчаем кнопку\r\n            clearBtn.disabled = true;\r\n\r\n            // TODO: изменяем пустой список - можно удалить\r\n            input.addEventListener('keydown', animateEmptyList);\r\n        }\r\n\r\n        // выводим задачи на страницу в ul\r\n        list.innerHTML = liItem;\r\n    }\r\n\r\n    // метод удаления таска по id\r\n    static delete(id) {\r\n        // отправляем запрос на удаления таска из БД\r\n        Task.sendRequest({\r\n                url: `https://ratatype-c2d32.firebaseio.com/tasks`,\r\n                method: 'DELETE',\r\n                id: id\r\n            }) // вызываем функцию что бы удалить со cраницы, и из localStorage\r\n            .then(deleteTask(id))\r\n            // рендерим список по новой, так как удалили задачу\r\n            .then(Task.renderList);\r\n    }\r\n\r\n    // метод полной очистки списка\r\n    static allClear() {\r\n            // запускаем анимацию загрузки\r\n            loadingAnimate();\r\n\r\n            //удаляем все из БД\r\n            Task.sendRequest({\r\n                    url: `https://ratatype-c2d32.firebaseio.com/tasks`,\r\n                    method: 'DELETE',\r\n                })\r\n                .then(() => {\r\n                    // удаляем все из localStorage\r\n                    localStorage.removeItem('tasks');\r\n\r\n                    // рендерим список\r\n                    Task.renderList();\r\n                }) // отключаем анимацю загрузки \r\n                .finally(loadingAnimate);\r\n        }\r\n        // TODO: остановился тут\r\n    static done(id) {\r\n\r\n        Task.sendRequest({\r\n                url: `https://ratatype-c2d32.firebaseio.com/tasks`,\r\n                method: 'PATCH',\r\n                id: id,\r\n                body: {\r\n                    done: true\r\n                }\r\n            })\r\n            .then(doneTask(id))\r\n            .then(Task.renderList);\r\n    }\r\n\r\n}\r\n\r\nform.addEventListener('submit', addTask);\r\nwindow.addEventListener('load', Task.renderList);\r\n\r\n\r\nlist.addEventListener('click', action.bind(this));\r\n\r\nfunction addTask(e) {\r\n    e.preventDefault();\r\n    loadingAnimate();\r\n\r\n    Task.createTask({\r\n        text: input.value.trim(),\r\n        date: new Date(),\r\n        done: false,\r\n    });\r\n\r\n    input.focus();\r\n    form.reset();\r\n}\r\n\r\nfunction toList(task) {\r\n    if (task.done) {\r\n        return `<li class=\"list-group-item d-flex justify-content-between list-group-item-success\">\r\n        <span class=\"task-title\"><span class=\"strike\">${task.text}</span><small class=\"date\">${new Date(task.date).toLocaleDateString()} ${new Date(task.date).toLocaleTimeString()}</small></span>\r\n        <div data-id=\"${task.id}\">\r\n            <button type=\"button\" data-action=\"delete-task\" class=\"btn btn-light align-self-end\">Удалить</button>\r\n        </div>\r\n        </li>`\r\n    }\r\n\r\n    return `<li class=\"list-group-item d-flex justify-content-between\">\r\n    <span class=\"task-title\">${task.text}<small class=\"date\">${new Date(task.date).toLocaleDateString()} ${new Date(task.date).toLocaleTimeString()}</small></span>\r\n    <div data-id=\"${task.id}\">\r\n        <button type=\"button\" data-action=\"done-task\" class=\"btn btn-light align-self-end\">Готово</button>\r\n        <button type=\"button\" data-action=\"delete-task\" class=\"btn btn-light align-self-end\">Удалить</button>\r\n    </div>\r\n    </li>`;\r\n}\r\n\r\n\r\n\r\nfunction action(event) {\r\n    const target = event.target;\r\n    if (target.dataset.action === 'delete-task') {\r\n        const id = target.parentElement.dataset.id;\r\n        Task.delete(id);\r\n    } else if (target.dataset.action === 'done-task') {\r\n        const id = target.parentElement.dataset.id;\r\n        Task.done(id);\r\n    }\r\n}\r\n\r\nfunction deleteTask(id) {\r\n    const all = getFromLocalStorage();\r\n    all.splice(all.findIndex(task => task.id === id), 1);\r\n    localStorage.setItem('tasks', JSON.stringify(all));\r\n}\r\n\r\nfunction doneTask(id) {\r\n    const all = getFromLocalStorage();\r\n    all.map(item => item.id === id ? item.done = true : false);\r\n    localStorage.setItem('tasks', JSON.stringify(all));\r\n}\r\n\r\n\r\nfunction loadingAnimate() {\r\n    const loading = document.querySelector('.loading');\r\n    if (loading.children.length > 0) {\r\n        loading.textContent = '';\r\n        loading.style.display = 'none';\r\n        return;\r\n    }\r\n    const imgLoading = '<img src=\"img/loading.gif\" alt=\"\" class=\"loading__img\">';\r\n    loading.style.display = 'flex';\r\n    loading.insertAdjacentHTML('afterbegin', imgLoading);\r\n}\r\n\r\nfunction setToLocalStorage(task) {\r\n    let all = getFromLocalStorage();\r\n    all.push(task);\r\n    localStorage.setItem('tasks', JSON.stringify(all));\r\n}\r\n\r\nfunction getFromLocalStorage() {\r\n    return JSON.parse(localStorage.getItem('tasks') || '[]');\r\n}\r\n\r\n\r\n// TODO: Рофл с пустым списком - можно удалить\r\nfunction animateEmptyList(event) {\r\n    const emoji = document.getElementsByClassName('emoji')[0];\r\n    const emptyTitle = document.getElementsByClassName('task-title')[0];\r\n\r\n    if (event.key === 'Backspace') {\r\n        emoji.src = 'img/backspace.svg';\r\n        emptyTitle.textContent = 'Остановись унтерменш! Noooooo'\r\n        if (event.target.value.length < 2) {\r\n            setTimeout(() => {\r\n                emoji.src = \"img/norm.svg\"\r\n                emptyTitle.textContent = 'Этот список пуст, как и твоя душа!'\r\n            }, 2000)\r\n        }\r\n    } else {\r\n        emoji.src = 'img/open.svg';\r\n        emptyTitle.textContent = 'Идет набор текста...'\r\n    }\r\n\r\n}"]}